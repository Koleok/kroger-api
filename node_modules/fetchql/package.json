{
  "_args": [
    [
      {
        "raw": "fetchql",
        "scope": null,
        "escapedName": "fetchql",
        "name": "fetchql",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/ethan/programming/ethanwillis/kroger-api/src"
    ]
  ],
  "_from": "fetchql@latest",
  "_id": "fetchql@2.0.1",
  "_inCache": true,
  "_location": "/fetchql",
  "_nodeVersion": "7.5.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/fetchql-2.0.1.tgz_1487643719835_0.02308124164119363"
  },
  "_npmUser": {
    "name": "gucheen",
    "email": "guchengf@live.com"
  },
  "_npmVersion": "4.1.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "fetchql",
    "scope": null,
    "escapedName": "fetchql",
    "name": "fetchql",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/fetchql/-/fetchql-2.0.1.tgz",
  "_shasum": "bc2dbe9579980772dadc3b74f9228d8f977f3a34",
  "_shrinkwrap": null,
  "_spec": "fetchql",
  "_where": "/home/ethan/programming/ethanwillis/kroger-api/src",
  "author": {
    "name": "guchengf@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/gucheen/FetchQL/issues"
  },
  "dependencies": {},
  "description": "GraphQL query client with Fetch",
  "devDependencies": {
    "apollo-server": "^0.1.4",
    "babel-cli": "^6.18.0",
    "babel-core": "^6.9.0",
    "babel-plugin-transform-es2015-modules-umd": "^6.18.0",
    "babel-plugin-transform-object-assign": "^6.8.0",
    "babel-preset-es2015": "^6.9.0",
    "babel-preset-stage-0": "^6.5.0",
    "babel-register": "^6.9.0",
    "chai": "^3.5.0",
    "coveralls": "^2.11.14",
    "eslint": "^3.11.1",
    "eslint-config-airbnb": "^13.0.0",
    "eslint-plugin-import": "^2.2.0",
    "express": "^4.13.4",
    "graphql": "^0.8.2",
    "istanbul": "^1.1.0-alpha.1",
    "mocha": "^3.2.0",
    "node-fetch": "^1.5.2"
  },
  "directories": {},
  "dist": {
    "shasum": "bc2dbe9579980772dadc3b74f9228d8f977f3a34",
    "tarball": "https://registry.npmjs.org/fetchql/-/fetchql-2.0.1.tgz"
  },
  "gitHead": "4d08c683b4226b1bc8b158b900569dba0dfe2eaa",
  "homepage": "https://github.com/gucheen/FetchQL#readme",
  "keywords": [
    "grahpql",
    "fetch"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "gucheen",
      "email": "guchengf@live.com"
    }
  ],
  "name": "fetchql",
  "optionalDependencies": {},
  "readme": "# FetchQL\n\n[![npm](https://img.shields.io/npm/v/fetchql.svg?maxAge=2592000)](https://www.npmjs.com/package/fetchql)\n[![Build Status](https://travis-ci.org/gucheen/FetchQL.svg?branch=master)](https://travis-ci.org/gucheen/FetchQL)\n[![Coverage Status](https://coveralls.io/repos/github/gucheen/FetchQL/badge.svg?branch=master)](https://coveralls.io/github/gucheen/FetchQL?branch=master)\n\nGraphQL query client with Fetch\n\nFetchQL is a query client for GraphQL server works on both browser and Node(need fetch support, eg. node-fetch)\n\n## Breaking Changes(since v2.0.0)\n\n  - Source code has been moved into `./src` and distributed file goes to `./lib`;\n  - Distributed file(`./lib/fetchql.js`) is unminified now. \n\n## Pros:\n  * lightweight\n  * wrap query methods\n  * easily set server-side\n  * get enum types by names (with cache)\n  * built-in interceptors\n  * request state callbacks\n  * written in ES2015 and modules\n\n## Usage\n\n  - `FetchQL` will export as ES5(CMD module) by default.\n  - If you want to use the ES2015, import or require `fetchql/src/index.js` instead.\n  \n## Documentation\n  * **Class FetchQL**\n  \n    `var Query = new FetchQL({ url, interceptors, headers, onStart, onEnd, omitEmptyVariables })`\n    \n      ```javascript\n      {\n        url: '', // GraphQL server address\n        interceptors: [],\n        headers: {}, // customized headers of all requests,\n        onStart: function (requestQueueLength) {}, // callback of a new request queue\n        onEnd: function (requestQueueLength) {} // callback of a request queue finished\n        omitEmptyVariables: false, // remove null props(null or '') from the variables\n      }\n      ```\n\n  * **interceptor**\n\n    `interceptors` is an optional parameter of the class. It can be an Array or an Object.\n\n    ```javascript\n    {\n      url: '',\n      interceptors: [interceptor]\n      // or\n      // interceptors: interceptor\n    }\n\n    // interceptor\n    {\n      request: function (url, config) {\n          // Modify the url or config here\n          return [url, config];\n      },\n\n      requestError: function (error) {\n          // Called when an error occured during another 'request' interceptor call\n          return Promise.reject(error);\n      },\n\n      response: function (response) {\n          // Modify the reponse object\n          return response;\n      },\n\n      responseError: function (error) {\n          // Handle an fetch error\n          return Promise.reject(error);\n      }\n    }\n    ```\n\n   - FetchQL.addInterceptors(interceptor[]|interceptor) => function\n   \n     Add more interceptors. Arguments are same with `interceptors` of class.\n   \n     It will return a function to remove **added interceptors**.\n   \n   - FetchQL.clearInterceptors() => void\n   \n     Remove all interceptors.\n    \n  * **FetchQL.query()**\n  \n    `Query.query({operationName: '', query: '', variables: {}, opts: {}})` => Promise\n    \n    Method for query data from the server. `operationName` **must** be provided.\n    \n    `query` and `variables` are followed the specification fo GraphQL.\n    \n    If any errors exist(from query response), will reject the promise.\n\n    * opts - additional options(will not be passed to server)\n\n      - opts.omitEmptyVariables - similar to omitEmptyVariables global settings, remove null props(null or '') from the variables\n    \n  * **FetchQL.getEnumTypes()**\n  \n    `Query.getEnumTypes(['array', 'of', 'enum', 'name'])` => Promise\n    \n    Will get enums' information from the server. Then you can get a following Object in promise:\n    \n    ```js\n    {\n      array: {\n        name: '',\n        kind: '',\n        description: '',\n        enumValues: {\n          name: '',\n          description: '',\n        }\n      },\n      of: {...},\n      enum: {...},\n      name: {...}\n    }\n    ```\n    \n    This method currently supports caching. All enum will be cached after first querying.\n    \n  * **FetchQL.getUrl()**\n  \n    Return current server address.\n    \n  * **FetchQL.setUrl()**\n  \n    `Query.setUrl('')`\n    \n    Set a new server address.\n\n  * **callback - onStart(requestQueueLength), onEnd(requestQueueLength)**\n    \n    When FetchQL make a new request, if it is belonged to a new queue(means there are no requests before), will call `onStart()`.\n\n    By this you can know that now there are some network requests within FetchQL.\n\n    When FetchQL finish a request and find that there are no requests any more, will call `onEnd()`.\n\n    By this you can know that all requests within FetchQL have been finished.\n\n    These two callbacks are useful when you want to watch the state of FetchQL's network requesting.\n    \n    For example, you may have an indicator(loading spinner, loading bar) in your web application, with this feature you can easily manage the indicator's state(display or not);\n\n  * **omitEmptyVariables** - Boolean(default to false) remove null props(null or '') from the variables in query\n\n    Sometimes `null` or `''` could be different meanings in backend logic.\n    \n    And if you just want the backend to **ignore these variables**, use this option to remove them.\n\n    **Notice**: Only properties those in an object of 'variables', will be removed.\n\n    ```\n    { willNotRemove: '', obj: { emptyString: '', nullProp: null } } => { willNotRemove: '', obj: {} } // remove them\n    ```\n  \n## .js or .mjs\n\n* Use `index.js` in any ES2015 environment.\n* Use `index.mjs` for Node (version >= 6.0) without babel, because Node doesn't support ES2015 modules natively.\n\n## Develop\n\n`npm install`\n\n`./test/server.js` could be used as a development server.\n\n## LICENSE\n\n The MIT License (MIT)\n\nCopyright (c) 2016 Cheng Gu\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/gucheen/FetchQL.git"
  },
  "scripts": {
    "compile": "babel src/index.js --out-file lib/fetchql.js",
    "coverage": "cat ./coverage/lcov.info | coveralls",
    "docs": "jsdoc src/index.js ./README.md -d ./docs/",
    "start": "babel -w src/index.js --out-file lib/fetchql.js",
    "test": "istanbul cover _mocha -- ./test/test"
  },
  "version": "2.0.1"
}
